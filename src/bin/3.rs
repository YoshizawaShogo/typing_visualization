// Generated by chatgpt

// ==============================
// use / const
// ==============================
use libc::{
    ECHO, ICANON, ICRNL, IEXTEN, INLCR, ISIG, ISTRIP, IXANY, IXON, OPOST, TCSANOW,
    VMIN, VTIME, tcgetattr, tcsetattr, termios,
};
use practice::{wait_keys, Key, Modifier};
use std::io::{self, Write};
use std::mem::MaybeUninit;
use std::os::fd::RawFd;

const STDIN_FD: RawFd = 0;

// ==============================
// TTY: raw モード & バースト読み
// ==============================
struct RawMode {
    fd: RawFd,
    orig: termios,
}
impl RawMode {
    fn new(fd: RawFd) -> io::Result<Self> {
        unsafe {
            let mut t = MaybeUninit::<termios>::uninit();
            if tcgetattr(fd, t.as_mut_ptr()) != 0 {
                return Err(io::Error::last_os_error());
            }
            let orig = t.assume_init();
            let mut raw = orig;

            raw.c_iflag &= !(IXON | IXANY | ICRNL | INLCR | ISTRIP);
            raw.c_oflag &= !(OPOST);
            raw.c_lflag &= !(ICANON | ECHO | IEXTEN | ISIG);
            raw.c_cc[VMIN] = 1;
            raw.c_cc[VTIME] = 0;

            if tcsetattr(fd, TCSANOW, &raw) != 0 {
                return Err(io::Error::last_os_error());
            }
            Ok(Self { fd, orig })
        }
    }
}
impl Drop for RawMode {
    fn drop(&mut self) {
        unsafe {
            let _ = tcsetattr(self.fd, TCSANOW, &self.orig);
        }
    }
}

// ==============================
// main
// ==============================
fn main() -> io::Result<()> {
    let _raw = RawMode::new(STDIN_FD)?;
    let mut out = io::BufWriter::new(io::stdout().lock());
    let timeout_ms = 10;

    loop {
        let keys = wait_keys(timeout_ms)?;
        writeln!(out, "{:?}\r", keys)?;
        out.flush()?;

        if keys.first() == Some(&Key::Char('d', Modifier { ctrl: true, shift: false, alt: false })) {
            break;
        }
    }

    Ok(())
}
